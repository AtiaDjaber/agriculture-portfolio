package com.motivewave.platform.study.volume;

import com.motivewave.platform.sdk.common.DataContext;
import com.motivewave.platform.sdk.common.Defaults;
import com.motivewave.platform.sdk.common.Enums;
import com.motivewave.platform.sdk.common.Inputs;
import com.motivewave.platform.sdk.common.PathInfo;
import com.motivewave.platform.sdk.common.Util;
import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;
import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;
import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;
import com.motivewave.platform.sdk.common.desc.PathDescriptor;
import com.motivewave.platform.sdk.common.desc.SliderDescriptor;
import com.motivewave.platform.sdk.common.desc.ValueDescriptor;
import com.motivewave.platform.sdk.study.StudyHeader;

import com.motivewave.platform.sdk.common.*;
import javax.swing.JOptionPane;

/** Displays volume as bars */
@StudyHeader(
    namespace="com.motivewave", 
    id="valumsg", 
    rb="com.motivewave.platform.study.nls.strings",
    name="valumsg",
    menu="AboRakan1",
    desc="valumsg",
    		signals= true,
    overlay=true,
    requiresVolume=true,
    requiresBarUpdates=true)

public class valumsg extends com.motivewave.platform.sdk.study.Study 
{
  final static String VOLUME_IND = "volumeInd";
  final static String VMA_IND = "vmaInd";
  final static String pefor1="pefor";
  final static String kkk="kkk";
  final static String mssg="mssg";
  
	enum Values { VOLUME, VMA };
	//enum Signals {"CROSS_ABOVE"};
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	 

	  
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  @Override
  public void initialize(Defaults defaults)
  {
    var sd = createSD();
    var tab = sd.addTab(get("TAB_GENERAL"));

    var grp = tab.addGroup(get("LBL_VOLUME"));
    var bars = new PathDescriptor(Inputs.BAR, get("LBL_VOLUME_BARS"), defaults.getBarColor(), 1.0f, null, true, false, true);
    bars.setShowAsBars(true);
    bars.setSupportsShowAsBars(true);
    bars.setSupportsDisable(false);
    bars.setColorPolicies(new Enums.ColorPolicy[] { Enums.ColorPolicy.PRICE_BAR, Enums.ColorPolicy.SOLID, Enums.ColorPolicy.HIGHER_LOWER, Enums.ColorPolicy.GRADIENT });
    bars.setColorPolicy(Enums.ColorPolicy.PRICE_BAR);
    grp.addRow(bars);
    grp.addRow(new IndicatorDescriptor(VOLUME_IND, get("LBL_INDICATOR"), null, null, false, true, true));

    grp = tab.addGroup(get("LBL_MOVING_AVERAGE"));
    grp.addRow(new MAMethodDescriptor(Inputs.METHOD, get("LBL_METHOD"), Enums.MAMethod.SMA));
    grp.addRow(new IntegerDescriptor(pefor1, get("ClosingLivale"), 70,  0, 9999, 1));
    grp.addRow(new IntegerDescriptor(kkk, get("thousand"), 0,  0, 9999999, 1));
    grp.addRow(new IntegerDescriptor(mssg, get("masgshow"), 300,  0, 9999999, 1));
   
    grp.addRow(new IntegerDescriptor(Inputs.PERIOD, get("BarNum"), 0, 0, 9999, 1));
    var pdesc = new PathDescriptor(Inputs.PATH, get("LBL_LINE"), Util.awtColor(225, 102, 0), 1.0f, null, false, false, true);
    pdesc.setShadeType(Enums.ShadeType.BELOW);
    grp.addRow(pdesc);
    grp.addRow(new IndicatorDescriptor(VMA_IND, get("LBL_INDICATOR"), null, null, false, false, true));
   



    // Quick Settings (Tool Bar and Popup Editor)
    sd.addQuickSettings(Inputs.BAR, Inputs.METHOD);
  
    sd.addQuickSettings(Inputs.PATH);

    var desc = createRD();
    desc.exportValue(new ValueDescriptor(Values.VOLUME, get("LBL_VOLUME"), new String[] {}));
    desc.exportValue(new ValueDescriptor(Values.VMA, get("LBL_VMA"), new String[] {Inputs.METHOD, Inputs.PERIOD}));
    desc.declarePath(Values.VOLUME, Inputs.BAR);
    desc.declarePath(Values.VMA, Inputs.PATH);
   
    //desc.declareSignal(Signals.CROSS_ABOVE,"Inputs.PATH");
    desc.setFixedBottomValue(0);
    desc.setBottomInsetPixels(0);
    desc.setRangeKeys(Values.VOLUME, Values.VMA);
    desc.setMinTopValue(10);
    desc.declareIndicator(Values.VOLUME, VOLUME_IND);
    desc.declareIndicator(Values.VMA, VMA_IND);
    desc.setMinTick(1.0);
    desc.setTopInsetPixels(5);
    desc.setBottomInsetPixels(0);
  }

  @Override
  public void clearState()
  {
    // TODO Auto-generated method stub
    super.clearState();
    path = getSettings().getPath(Inputs.PATH);
    period = getSettings().getInteger(Inputs.PERIOD, 20);
    method = getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.SMA);
  }

  @Override
  protected void calculate(int index, DataContext ctx)
  
  {  
	  //====================================================================================
	  Object input = getSettings().getInput(Inputs.INPUT);
	    int period = getSettings().getInteger(Inputs.PERIOD);
	    double pefor2 = getSettings().getDouble(pefor1);
	    double pefor3 = getSettings().getDouble(kkk);
	    double pefor4 = getSettings().getDouble(mssg);
	  //=====================================================================================
    var series = ctx.getDataSeries();
    Double open = series.getDouble(index -period, Enums.BarInput.OPEN);
    Double close = series.getDouble(index -period, Enums.BarInput.CLOSE);
    Double low = series.getDouble(index -period, Enums.BarInput.LOW);
    Double high = series.getDouble(index -period, Enums.BarInput.HIGH);
    long volum = series.getVolume(index-period);

   Instrument instr = ctx.getInstrument();
   String companyname  = instr.getSymbol();
    if (open == null || close == null || low == null || high == null ) return;
    double delta = ((close - low)/(high - low))*100;
    double   ii =	volum * close ;
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    if(ii > pefor3) {
    if (delta >= pefor2  ) {
    int i;
    for (i = 0; i < index; i++) {
    	
    	if (series.getVolume(index-period)< series.getVolume(index-(period+i)) ) {
    		break;   		
        }  	
      }
    i=i-1;
  
 series.setInt(index, Values.VOLUME,i);
    series.setComplete(index);
    if (i>(int)pefor4) {
	//هنا ارغب في اضافة كود تشغيل الملف الصوتي 
	   JOptionPane.showMessageDialog(null,i+"/"+companyname);
	  // هذه الرسالة شغاله تمام ولكن احتاج تكبير حجم النص فيها بحيث تضهر كبيرة
	   
	   //========================================================================
    }
    
    } }}
  private int period;
  private Enums.MAMethod method;
 private PathInfo path;
}
